package main

/*
Метод представляет функцию, связанную с определенным типом или структурой

Пример:
func (имя_параметра тип_получателя) имя_метода (параметры) (типы возвращаемых результатов) {
тело метода
}

(имя_параметра тип_получателя)-> это и есть определение получателя

Важно!!!:
Вы можете объявить метод только с получателем, тип которого определен в том же пакете, что и метод.
Вы не можете объявить метод с получателем, тип которого определен в другом пакете

Методы с получателями значений принимают либо значение, либо указатель в качестве получателя
*/

import "fmt"

func main() {
	println("////////////Определение для среза")
	var lib = library{"Book1", "Book2", "Book3"}
	lib.print()

	println("////////////Определение для структуры")
	var tom = person{name: "Tom", age: 24}
	tom.print()
	tom.eat("борщ с капустой, но не красный")

	println("////////Определение для структуры через указатель")
	var petr = person2{name: "Petr", age: 24}
	//можно избавиться от этой записи, так как указатель будет вызван автоматически - так заложено в GO
	//var petrPointer *person2 = &petr
	fmt.Println("before", petr.age)
	//petrPointer.updateAge(33)
	petr.updateAge(33)
	fmt.Println("after", petr.age)
}

// ////////Определение для среза
// Определен именованный тип, представляющий срез из строк
type library []string

// Для вывода всех элементов из среза определеям метод:
func (l library) print() {

	for _, val := range l {
		fmt.Println(val)
	}
}

// ////////Определение для структуры
type person struct {
	name string
	age  int
}

func (p person) print() {
	fmt.Println("Имя:", p.name)
	fmt.Println("Возраст:", p.age)
}

func (p person) eat(meal string) {
	fmt.Println(p.name, "ест", meal)
}

// //////Определение получателя через указатель
//Причины использования:
//1) метод может изменять значение, на которое указывает его получатель.
//2) избежать копирования значения при каждом вызове метода. Это может быть более эффективно, например, если получателем является большая структура.

type person2 struct {
	name string
	age  int
}

func (p *person2) updateAge(newAge int) {
	(*p).age = newAge
}
